PROJECT(CellMLAPIPlugin)

MACRO(RETRIEVE_CELLML_API_EXTERNAL_BINARIES)
    # Retrieve the CellML API external binaries

    IF(WIN32)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_IMPORT_LIBRARY_PREFIX}annotools${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}ccgs${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celeds${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}celedsexporter${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cellml${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cevas${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}cuses${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}malaes${CMAKE_IMPORT_LIBRARY_SUFFIX}
            ${CMAKE_IMPORT_LIBRARY_PREFIX}vacss${CMAKE_IMPORT_LIBRARY_SUFFIX}
        )
    ELSEIF(APPLE)
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs.3${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml.2${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes.1${CMAKE_SHARED_LIBRARY_SUFFIX}
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss.1${CMAKE_SHARED_LIBRARY_SUFFIX}
        )
    ELSE()
        SET(CELLML_API_EXTERNAL_BINARIES
            ${CMAKE_SHARED_LIBRARY_PREFIX}annotools${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}ccgs${CMAKE_SHARED_LIBRARY_SUFFIX}.3
            ${CMAKE_SHARED_LIBRARY_PREFIX}celeds${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}celedsexporter${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cellml${CMAKE_SHARED_LIBRARY_SUFFIX}.2
            ${CMAKE_SHARED_LIBRARY_PREFIX}cevas${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}cuses${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}malaes${CMAKE_SHARED_LIBRARY_SUFFIX}.1
            ${CMAKE_SHARED_LIBRARY_PREFIX}vacss${CMAKE_SHARED_LIBRARY_SUFFIX}.1
        )
    ENDIF()
ENDMACRO()

# Retrieve the plugin's binary file(s)

STRING(REPLACE "${${CMAKE_PROJECT_NAME}_SOURCE_DIR}/" "" RELATIVE_PROJECT_SOURCE_DIR "${PROJECT_SOURCE_DIR}/${REMOTE_EXTERNAL_BINARIES_DIR}")

IF(WIN32)
    IF(RELEASE_MODE)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 23f228f572763c17f149408b19181b842a05275a)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib f39ca12a86776a321c6ffbd995e6c16916c1a4e6)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll bf43c6e43ae67b5c9c7938ed01f97c242365de10)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib 8ae78880db1875a4ab702f0292f7f8927d0f574e)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll e706542ecb305a05e7fde715c63007b8aa278961)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 3de77ca127f36425f82c28cc9c7298a248c2e696)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll 6d035c890e1a5772fa73507d2564cfd7ea364330)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib aa21f2115da6f4b941053162c602ea528ee1daab)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 84d914ce64d1a211acf1e07d702fed9387e357e9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib e7f1283b639dead3101a16422f7f6c4e2333cde0)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll 520d96a9200d532923bafeb5d0fcc8c433992081)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 2c859b7a61b436fdaede2bfebe3f0c34ffdfcb52)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 4fda022f3b395dded6e903b9fa11b59c52fc7522)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib 5079e96aa73d547d7ce3b2cf4d68a95d12265aba)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll c5df37c36e226e0e7b4f321882bf146c36456e5f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib 5303560297464d75bb7ca1f78150a176088be3a2)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 62afcd52909047f9d7dd2f8ab80b2b7ae2186ad1)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 96badcd6bfa95e142f14c2a76397ea9760eeea6a)
    ELSE()
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.dll 36769bc37a05f08dec9a629604bacaa16b82488d)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} annotools.lib 65d149388e9a877863936ab627e8d3154a706d58)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.dll 4eaad9591ab531b1bbf97839fa164b32008ce1e9)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} ccgs.lib c26ff1de1e6aa085fae5d55e05dff281d7fa5c83)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.dll c46d410d299e936c45cd3c09dbe9b877d8dda6fa)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celeds.lib 293e3549d0f310eaaf6cbc8827d9d5a1d82a59c4)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.dll b055ed7e93315d87fc897f9156a067168e862e58)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} celedsexporter.lib 9809956e61f1861d76e32de54c676e3d7698a7f5)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.dll 2d870573a6afab0eb9c830a493fdcf90193f7394)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cellml.lib 7add2dc3a50429a1b4790b961b21c427ef504a8b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.dll f204a38679d1e461e67cb409a7396426653e2fa8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cevas.lib 11d453aa67e04e947ebd7939e81dd7f1326a891f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.dll 99446a0a1eacb20e2f9706d6a7d8870433fcc7a8)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} cuses.lib 46d9fe1f17ba3f7014a0bca9160aaebee22fa546)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.dll 83bc709a4f8ff635ae034b16ac5708e080f044dd)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} malaes.lib d98529573e1122c731bdc88a856ff660a5133f5f)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.dll 2c56a7cd8ced7d41c7f2cebccaaf882335b9ab1b)
        RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} vacss.lib 46d6fc20babe622b010d8d8c4677a0e2649fd95d)
    ENDIF()
ELSEIF(APPLE)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.2.dylib f1afa9dbfb9344a4f03e64c6ef9880ab80a8b7ab)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.3.dylib 746d570763cb2d6f00453d85361316fa1a765421)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.1.dylib 27de0eb84c260a367279410c1519a11e6e093add)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.1.dylib 2221d35cc5bd37dead6fd8bcb9117de5dc45a13c)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.2.dylib 2ca14edca9e1bbaf0bf9c64ea0e3e91ab092d0ea)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.1.dylib 6471c1ce28cb7b3ac20bb3c00d1048e7bf590411)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.1.dylib 0835082ab5f5b689f9d561e176435cf01f7dc9ef)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.1.dylib 146d76a7588e570fb3d2fc69b19c52d38031eda2)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.1.dylib cd9a361f565bc77ea09f60447a6cb082e2592c5c)
ELSE()
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libannotools.so.2 ecc50f948959de10658e313f9b288419cc625aba)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libccgs.so.3 822872ba2722eec48e29ec9d742f07bde37b3200)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceleds.so.1 e04a51cf0925bb9da8ba3ad36b7adc59772f808d)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libceledsexporter.so.1 5720a27017937f44965957441e450896e7f50125)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcellml.so.2 cb4444a4cae2c079199fa59da4bb7ca61280b1cc)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcevas.so.1 f4976f8c94bff477e9b61beb7bfbe0f8e2b85bf9)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libcuses.so.1 9c4c5877866e988565249249280217703ef56a24)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libmalaes.so.1 d313e2638629b0ac2a06e2b16435a582e3a296c3)
    RETRIEVE_BINARY_FILE(${RELATIVE_PROJECT_SOURCE_DIR} libvacss.so.1 1bf057ecce02fea30812c6cb979b17403706ad40)
ENDIF()

# Retrieve the CellML API external binaries

RETRIEVE_CELLML_API_EXTERNAL_BINARIES()

# Ignore some warnings on Windows

IF(WIN32)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091 /wd4290")
    # Note: on Windows, some warnings get generated, but we have nothing to do
    #       with them...
ENDIF()

# Add the plugin

SET(CELLML_API_EXTERNAL_BINARIES_DIR ${PROJECT_SOURCE_DIR}/${LOCAL_EXTERNAL_BINARIES_DIR})

ADD_PLUGIN(CellMLAPI
    SOURCES
        ../../plugininfo.cpp

        src/cellmlapiplugin.cpp
    HEADERS_MOC
        src/cellmlapiplugin.h
    INCLUDE_DIRS
        include
        src
    QT_MODULES
        Core
    EXTERNAL_BINARIES_DIR
        ${CELLML_API_EXTERNAL_BINARIES_DIR}
    EXTERNAL_BINARIES
        ${CELLML_API_EXTERNAL_BINARIES}
    TESTS
        tests
)

# Deploy the plugin's external binaries
# Note: it must be done here since ADD_PLUGIN doesn't support the fact that an
#       external binary may have dependencies (something that is important on OS
#       X)...

IF(WIN32)
    SET(CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT
        annotools ccgs celeds celedsexporter cellml cevas cuses malaes vacss)

    FOREACH(CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT ${CELLML_API_EXTERNAL_BINARIES_FOR_DEPLOYMENT})
        WINDOWS_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                               ${CMAKE_SHARED_LIBRARY_PREFIX}${CELLML_API_EXTERNAL_BINARY_FOR_DEPLOYMENT}${CMAKE_SHARED_LIBRARY_SUFFIX})
    ENDFOREACH()
ELSEIF(APPLE)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} annotools.2
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} ccgs.3
                        annotools.2 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celeds.1
                        cellml.2 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} celedsexporter.1
                        annotools.2 ccgs.3 celeds.1 cellml.2 cevas.1 cuses.1 malaes.1)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cevas.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} cuses.1
                        annotools.2 cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} malaes.1
                        cellml.2)
    OS_X_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR} vacss.1
                        annotools.2 cellml.2 cuses.1)
ELSE()
    FOREACH(CELLML_API_EXTERNAL_BINARY ${CELLML_API_EXTERNAL_BINARIES})
        LINUX_DEPLOY_LIBRARY(${CELLML_API_EXTERNAL_BINARIES_DIR}
                             ${CELLML_API_EXTERNAL_BINARY})
    ENDFOREACH()
ENDIF()
