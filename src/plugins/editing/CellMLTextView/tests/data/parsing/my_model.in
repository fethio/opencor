def model{my_model_cmeta_id_with-hyphens-and.periods.} my_model as
    // A comment can fit on one line...

    // A comment can also fit
    // on one, two or even
    // more lines...

    def import{my_import1_cmeta_id} using "imported_model.cellml" for
    enddef;

    // In between comment #1...

    def import{my_import2_cmeta_id} using "imported_model.cellml" for
        // In between comment #2...

        unit{my_imported_unit1_cmeta_id} my_imported_unit1 using unit my_reference_unit1;

        // In between comment #3...

        comp{my_imported_component1_cmeta_id} my_imported_component1 using comp my_reference_component1;
        comp{my_imported_component2_cmeta_id} my_imported_component2 using comp my_reference_component2;

        // In between comment #4...

        unit{my_imported_unit2_cmeta_id} my_imported_unit2 using unit my_reference_unit2;

        // In between comment #5...
    enddef;

    // In between comment #6...

    def unit{my_base_unit_cmeta_id} my_base_unit as base unit;

    // In between comment #7...

    def unit{my_unit1_cmeta_id} my_unit1 as
    enddef;

    // In between comment #8...

    def unit{my_unit2_cmeta_id} my_unit2 as
        // In between comment #9...

        unit{second_cmeta_id} second;

        // In between comment #10...

        unit some_unit {pref: milli};

        // In between comment #11...

        unit some_unit {pref: 3};

        // In between comment #12...

        unit some_unit {pref: +3};

        // In between comment #13...

        unit some_unit {pref: -3};

        // In between comment #14...

        unit some_unit {expo: 3};

        // In between comment #15...

        unit some_unit {mult: 3};

        // In between comment #16...

        unit some_unit {off: 3};

        // In between comment #17...

        unit some_unit {pref: milli, expo: 3, mult: +5, off: -7};

        // In between comment #18...
    enddef;

    // In between comment #19...

    def comp{my_component1_cmeta_id} my_component1 as
    enddef;

    // In between comment #20...

    def comp{my_component2_cmeta_id} my_component2 as
        // In between comment #21...

        var{my_variable1_cmeta_id} my_variable1: some_unit;

        // In between comment #22...

        var{my_variable2_cmeta_id} my_variable2: second;

        // In between comment #23...

        var{my_variable3_cmeta_id} my_variable3: some_unit {init: 3};

        // In between comment #24...

        var{my_variable4_cmeta_id} my_variable4: some_unit {init: +3};

        // In between comment #25...

        var{my_variable5_cmeta_id} my_variable5: some_unit {init: -3};

        // In between comment #26...

        var{my_variable6_cmeta_id} my_variable6: some_unit {pub: in, priv: out};

        // In between comment #27...

        var{my_variable7_cmeta_id} my_variable7: some_unit {pub: none};

        // In between comment #28...

        var{my_variable8_cmeta_id} my_variable8: some_unit {init: my_variable7};

        // In between comment #29...

        a = sel
            otherwise:
                other_expression;
            case condition1:
                expression1;
            case condition2:
                expression2;
        endsel;

        // In between comment #30...

        a = sel
            case condition1:
                expression1;
            otherwise:
                other_expression;
            case condition2:
                expression2;
        endsel;

        // In between comment #31...

        a = sel
            case condition1:
                expression1;
            case condition2:
                expression2;
            otherwise:
                other_expression;
        endsel;

        // In between comment #32...

        var my_variable8: some_unit;

        // In between comment #33...

        a = sel
            case condition1:
                expression1;
            case condition2:
                expression2;
            otherwise:
                other_expression;
        endsel;

        // In between comment #34...

        a ={my_equation_cmeta_id} b;

        // In between comment #35...

        a = ode(b, t);
        a = ode(b, t, 2{dimensionless});

        // In between comment #36...

        a = 3.5{second};

        // In between comment #37...

        a = b or c;
        a = b and c;
        a = b xor c;
        a = b == c;
        a = b <> c;
        a = b < c;
        a = b > c;
        a = b <= c;
        a = b >= c;
        a = b+c;
        a = b+c+d;
        a = b-c;
        a = b-c-d;
        a = b*c;
        a = b*c*d;
        a = b/c;
        a = b/c/d;
        a = not b;
        a = +b;
        a = -b;
        a = true;
        a = false;
        a = nan;
        a = pi;
        a = inf;
        a = e;
        a = b*(c+d);
        a = abs(b);
        a = ceil(b);
        a = exp(b);
        a = fact(b);
        a = floor(b);
        a = ln(b);
        a = sqr(b);
        a = sqrt(b);
        a = min(b, c);
        a = min(b, c, d);
        a = max(b, c);
        a = max(b, c, d);
        a = gcd(b, c);
        a = gcd(b, c, d);
        a = lcm(b, c);
        a = lcm(b, c, d);
        a = sin(b);
        a = cos(b);
        a = tan(b);
        a = sec(b);
        a = csc(b);
        a = cot(b);
        a = sinh(b);
        a = cosh(b);
        a = tanh(b);
        a = sech(b);
        a = csch(b);
        a = coth(b);
        a = asin(b);
        a = acos(b);
        a = atan(b);
        a = asec(b);
        a = acsc(b);
        a = acot(b);
        a = asinh(b);
        a = acosh(b);
        a = atanh(b);
        a = asech(b);
        a = acsch(b);
        a = acoth(b);
        a = log(b);
        a = log(b, 3{dimensionless});
        a = log(b, c);
        a = pow(b, 3{dimensionless});
        a = pow(b, c);
        a = root(b, 3{dimensionless});
        a = root(b, c);
        a = rem(b, 3{dimensionless});
        a = rem(b, c);

        // In between comment #38...
    enddef;

    // In between comment #39...

    def group as containment for
        // In between comment #40...

        comp my_component1 incl
            // In between comment #41...

            comp my_component11 incl
                // In between comment #42...

                comp my_component111;

                // In between comment #43...

                comp my_component112;

                // In between comment #44...
            endcomp;

            // In between comment #45...
        endcomp;

        // In between comment #46...
    enddef;

    // In between comment #47...

    def group as containment my_containment for
        comp my_component1 incl
            comp my_component12 incl
                comp my_component121;
            endcomp;

            comp my_component13;
        endcomp;
    enddef;

    // In between comment #48...

    def group as encapsulation for
        comp my_component11 incl
            comp my_component111;
            comp my_component112;
        endcomp;

        comp my_component12 incl
            comp my_component121;
        endcomp;
    enddef;

    // In between comment #49...

    def group{my_group_cmeta_id} as encapsulation{my_encapsulation_cmeta_id} and containment{my_containment_cmeta_id} my_containment for
        comp{my_component_cmeta_id} my_component;
    enddef;

    // In between comment #50...

    def map{my_connection_cmeta_id} between{my_map_components_cmeta_id} my_component1 and my_component2 for
        // In between comment #51...

        vars{my_map_variables1_cmeta_id} my_variable11 and my_variable21;

        // In between comment #52...

        vars{my_map_variables2_cmeta_id} my_variable12 and my_variable22;

        // In between comment #53...

        vars{my_map_variables3_cmeta_id} my_variable13 and my_variable23;

        // In between comment #54...
    enddef;

    // In between comment #55...
enddef;
